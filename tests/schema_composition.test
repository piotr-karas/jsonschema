# Copyright (c) 2025 ANT Solutions https://antsolutions.eu/

# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.

source test_utils.tcl

tcltest::test schema-composition-1 "Validate allOf" -body {
    ::jsonschema::validate \
    {"sth"} \
    {{
        "allOf": [
            {"type": "string"},
            {"const": "sth"}
        ]
    }}
} -result {valid true}

tcltest::test schema-composition-2 "Throw for allOf" -body {
    ::jsonschema::validate \
    {"sth"} \
    {{
        "allOf": [
            {"type": "number"},
            {"const": "sth"}
        ]
    }}
} -result {valid false errors {{message {Invalid data type} instancePath {} instanceValue sth schemaPath {allOf 0 type} schemaValue number found string type ErrInvalidDataType}}}

tcltest::test schema-composition-3 "Validate anyOf" -body {
    ::jsonschema::validate \
    {"sth"} \
    {{
        "anyOf": [
            {"type": "number"},
            {"const": "sth"}
        ]
    }}
} -result {valid true}

tcltest::test schema-composition-4 "Throw for anyOf" -body {
    ::jsonschema::validate \
    {"sth"} \
    {{
        "anyOf": [
            {"type": "number"},
            {"const": "not_matching"}
        ]
    }}
} -result {valid false errors {{message {Instance dose not match any of provided schemas} instancePath {} schemaPath anyOf type ErrAnyOf}}}

tcltest::test schema-composition-5 "Validate oneOf" -body {
    ::jsonschema::validate \
    {"sth"} \
    {{
        "oneOf": [
            {"type": "number"},
            {"const": "sth"}
        ]
    }}
} -result {valid true}

tcltest::test schema-composition-6 "Throw for oneOf" -body {
    ::jsonschema::validate \
    {"sth"} \
    {{
        "oneOf": [
            {"type": "string"},
            {"const": "sth"}
        ]
    }}
} -result {valid false errors {{message {Instance dose not match exactly one of provided schemas} instancePath {} schemaPath oneOf found {0 1} type ErrOneOf}}}

tcltest::test schema-composition-7 "Validate not" -body {
    ::jsonschema::validate \
    {"sth"} \
    {{
        "not": {"type": "number"}
    }}
} -result {valid true}

tcltest::test schema-composition-8 "Throw for not" -body {
    ::jsonschema::validate \
    {"sth"} \
    {{
        "not": {"type": "string"}
    }}
} -result {valid false errors {{message {Instance is matching schema, while it should not} instancePath {} schemaPath not type ErrNot}}}
