# Copyright (c) 2025 ANT Solutions https://antsolutions.eu/

# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.

source test_utils.tcl

tcltest::test ref-1 "Validate simple relative ref" -body {
    ::jsonschema::validate -instanceFormat yaml -includeSchemas \
    [list {json {{
        "$id": "/schema/friend",
        "type": "object",
        "properties": {
            "name": {"type": "string"},
            "age": {"type": "number"}
        },
        "required": ["name", "age"]}}}] \
    {
        name: "Gandalf",
        friends: [
            {name: "Frodo", age: 50},
            {name: "Sam", age: 38}
        ]} \
    {{
        "type": "object",
        "properties": {
            "name": {"type": "string"},
            "friends": {
                "type": "array",
                "items": {
                    "$ref": "/schema/friend"
                }
            }
        }
    }}
} -result {valid true}

tcltest::test ref-2 "Throw for bad number defined in ref" -body {
    ::jsonschema::validate -instanceFormat yaml -includeSchemas \
    [list {id "/schema/friend" json {{
        "type": "object",
        "properties": {
            "name": {"type": "string"},
            "age": {"type": "number", "maximum": 40}
        },
        "required": ["name", "age"]}}}] \
    {
        name: "Gandalf",
        friends: [
            {name: "Frodo", age: 50},
            {name: "Sam", age: 38}
        ]} \
    {{
        "type": "object",
        "properties": {
            "name": {"type": "string"},
            "friends": {
                "type": "array",
                "items": {
                    "$ref": "/schema/friend"
                }
            }
        }
    }}
} -result {valid false errors {{message {Number is greater than required} instancePath {friends 0 age} instanceValue 50 schemaPath {properties friends items {$ref:/schema/friend} properties age maximum} schemaValue 40 type ErrMaximum}}}

tcltest::test ref-3 "Validate ref from file" -body {
    ::jsonschema::validate -instanceFormat yaml -includeSchemas \
    [list {id "/schema/friend" jsonFile {.\example\ref.schema.json}}] \
    {
        name: "Gandalf",
        friends: [
            {name: "Frodo", age: 50},
            {name: "Sam", age: 38}
        ]} \
    {{
        "type": "object",
        "properties": {
            "name": {"type": "string"},
            "friends": {
                "type": "array",
                "items": {
                    "$ref": "/schema/friend"
                }
            }
        }
    }}
} -result {valid true}

tcltest::test ref-4 "Validate subschema" -body {
    ::jsonschema::validate -instanceFormat yaml -includeSchemas \
    [list {id "/schema/friend" json {{
        "$id": "will_be_overridden",
        "type": "object",
        "properties": {
            "name": {"type": "string"},
            "age": {"type": "number"}
        },
        "required": ["name", "age"]}}}] \
    {
        name: "Gandalf",
        friends: [
            {name: "Frodo"},
            {name: "Sam"}
        ]} \
    {{
        "type": "object",
        "properties": {
            "name": {"type": "string"},
            "friends": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {"$ref": "/schema/friend#/properties/name"}
                    }
                }
            }
        }
    }}
} -result {valid true}

tcltest::test ref-5 "Validate absolute ref" -body {
    ::jsonschema::validate -instanceFormat yaml -includeSchemas \
    [list {json {{
        "$id": "http://example.com/schema/friend",
        "type": "object",
        "properties": {
            "name": {"type": "string"},
            "age": {"type": "number"}
        },
        "required": ["name", "age"]}}}] \
    {
        name: "Gandalf",
        friends: [
            {name: "Frodo", age: 50},
            {name: "Sam", age: 38}
        ]} \
    {{
        "$id": "http://example.com/schema/wizard",
        "type": "object",
        "properties": {
            "name": {"type": "string"},
            "friends": {
                "type": "array",
                "items": {
                    "type": "object",
                    "properties": {
                        "name": {"$ref": "/schema/friend#/properties/name"},
                        "age": {"$ref": "/schema/friend#/properties/age"}
                    },
                    "required": ["name", "age"]
                }
            }
        }
    }}
} -result {valid true}

tcltest::test ref-6 "Validate subschema recursion" -body {
    ::jsonschema::validate -instanceFormat yaml \
    {
        name: "Gandalf",
        age: 777,
        friends: [
            {
                name: "Frodo", 
                age: 50,
                friends: [
                    {name: "Bilbo", age: 111}
                ]
            },
            {name: "Sam", age: 38}
        ]} \
    {{
        "$id": "http://example.com/schema/wizard",
        "type": "object",
        "properties": {
            "name": {"type": "string"},
            "age": {"type": "number"},
            "friends": {
                "type": "array",
                "items": {"$ref": "#"}
            },
            "required": ["name", "age"]
        }
    }}
} -result {valid true}

tcltest::test ref-7 "Throw for missing property in schema loop" -body {
    ::jsonschema::validate -instanceFormat yaml -includeSchemas \
    [list {json {{
        "$id": "http://example.com/schema/friend",
        "type": "object",
        "properties": {
            "name": {"type": "string"},
            "wizardFriends": {
                "type": "array",
                "items": {"$ref": "/schema/wizard"}
            }
        },
        "required": ["name", "wizardFriends"]}}}] \
    {
        wizardName: "Gandalf",
        age: 777,
        friends: [
            {
                name: "Frodo",
                wizardFriends: [
                    {wizardName: "Gandalf"}
                ]
            },
        ]} \
    {{
        "$id": "http://example.com/schema/wizard",
        "type": "object",
        "properties": {
            "wizardName": {"type": "string"},
            "age": {"type": "number"},
            "friends": {
                "type": "array",
                "items": {"$ref": "/schema/friend"}
            }
        },
        "required": ["wizardName", "age"]
    }}
} -result {valid false errors {{message {Missing required property} instancePath {friends 0 wizardFriends 0} schemaPath {properties friends items {$ref:/schema/friend} properties wizardFriends items {$ref:/schema/wizard} required 1} schemaValue age type ErrMissingProperty}}}